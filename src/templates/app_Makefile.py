#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1450652300.781097
__CHEETAH_genTimestamp__ = 'Sun Dec 20 14:58:20 2015'
__CHEETAH_src__ = '/home/jeb/Repositories/cFEmdd/src/templates/app_Makefile.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Dec 20 14:39:30 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class app_Makefile(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(app_Makefile, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''# File: CFS Application Makefile 
''')
        write(u'''# $Id: Makefile 1.8 2009/07/09 12:25:54EDT rmcgraw Exp  $
''')
        write(u'''# $Log: Makefile  $
# Revision 1.8 2009/07/09 12:25:54EDT rmcgraw 
# DCR8291:1 Changed CFE_MISSION_INC to CFS_MISSION_INC and added log
''')
        write(u'''# Subsystem produced by this makefile.
''')
        write(u'''APPTARGET =\\
''')
        _v = VFFSL(SL,"application_name",True) # u'$application_name' on line 15, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$application_name')) # from line 15, col 1.
        write(u'''

''')
        write(u'''# Entry Point for task
''')
        write(u'''ENTRY_PT = ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 20, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 20, col 12.
        write(u'''Main

''')
        write(u'''# Object files required to build subsystem.
''')
        write(u'''OBJS = ''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 25, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 25, col 8.
        write(u'''.o

''')
        write(u'''# Source files required to build subsystem; used to generate dependencies.
# As long as there are no assembly files this can be automated.
''')
        write(u'''SOURCES = $(OBJS:.o=.c)


''')
        #  
        #  Specify extra C Flags needed to build this subsystem
        #  
        write(u'''LOCAL_COPTS = 


''')
        #  
        #  EXEDIR is defined here, just in case it needs to be different for a custom
        #  build
        #  
        write(u'''EXEDIR=../exe

''')
        #  
        #  Certain OSs and Application Loaders require the following option for
        #  Shared libraries. Currently only needed for vxWorks 5.5 and RTEMS.
        #  For each shared library that this app depends on, you need to have an
        #  entry like the following:
        #   -R../tst_lib/tst_lib.elf
        #  
        write(u'''SHARED_LIB_LINK = 

# Should not have to change below this line, except for customized 
# Mission and cFE directory structures
 
''')
        write(u'''# Set build type to CFE_APP. This allows us to 
# define different compiler flags for the cFE Core and Apps.
''')
        write(u'''BUILD_TYPE = CFE_APP

''')
        #   
        #  Include all necessary cFE make rules
        #  Any of these can be copied to a local file and 
        #  changed if needed.
        #  
        #  
        #        cfe-config.mak contains PSP and OS selection
        #  
        write(u'''include ../cfe/cfe-config.mak
''')
        #  
        #        debug-opts.mak contains debug switches
        #  
        write(u'''include ../cfe/debug-opts.mak
''')
        #  
        #        compiler-opts.mak contains compiler definitions and switches/defines
        #  
        write(u'''include $(CFE_PSP_SRC)/$(PSP)/make/compiler-opts.mak

''')
        #  
        #  Setup the include path for this subsystem
        #  The OS specific includes are in the build-rules.make file
        #  
        #  If this subsystem needs include files from another app, add the path here.
        #  
        write(u'''INCLUDE_PATH = \\
-I$(OSAL_SRC)/inc \\
-I$(CFE_CORE_SRC)/inc \\
-I$(CFE_PSP_SRC)/inc \\
-I$(CFE_PSP_SRC)/$(PSP)/inc \\
-I$(CFS_APP_SRC)/inc \\
-I$(CFS_APP_SRC)/$(APPTARGET)/fsw/src \\
-I$(CFS_MISSION_INC) \\
-I../cfe/inc \\
-I../inc

''')
        #  
        #  Define the VPATH make variable. 
        #  This can be modified to include source from another directory.
        #  If there is no corresponding app in the cfs-apps directory, then this can be discarded, or
        #  if the mission chooses to put the src in another directory such as "src", then that can be 
        #  added here as well.
        #  
        write(u'''VPATH = $(CFS_APP_SRC)/$(APPTARGET)/fsw/src 

''')
        #  
        #  Include the common make rules for building a cFE Application
        #  
        write(u'''include $(CFE_CORE_SRC)/make/app-rules.mak
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_app_Makefile= 'respond'

## END CLASS DEFINITION

if not hasattr(app_Makefile, '_initCheetahAttributes'):
    templateAPIClass = getattr(app_Makefile, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(app_Makefile)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=app_Makefile()).run()


