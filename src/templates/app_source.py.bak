#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1450479088.91729
__CHEETAH_genTimestamp__ = 'Fri Dec 18 14:51:28 2015'
__CHEETAH_src__ = '/home/jeb/Repositories/cFEmdd/src/templates/app_source.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Dec 15 10:01:58 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class app_source(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(app_source, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''/*******************************************************************************
** File: ''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 2, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 2, col 10.
        write(u'''_app.c
**
** Purpose:
**   This file contains the source code for the ''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 5, col 49
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 5, col 49.
        write(u''' App.
**
*******************************************************************************/

/*
**   Include Files:
*/

#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 13, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 13, col 12.
        write(u'''_app.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 14, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 14, col 12.
        write(u'''_app_msg.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 15, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 15, col 12.
        write(u'''_app_events.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 16, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 16, col 12.
        write(u'''_version.h"

/** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 19, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 19, col 4.
        write(u'''_AppMain() -- Application entry point and main process loop          */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * *  * * * * **/
void ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 22, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 22, col 6.
        write(u'''_AppMain( void )
{
    int32  status;
    uint32 RunStatus = CFE_ES_APP_RUN;

    CFE_ES_PerfLogEntry(''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 27, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 27, col 25.
        write(u'''_APP_PERF_ID);

    ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 29, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 29, col 5.
        write(u'''_AppInit();

    /*
    ** ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 32, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 32, col 8.
        write(u''' Runloop
    */
    while (CFE_ES_RunLoop(&RunStatus) == TRUE)
    {
        CFE_ES_PerfLogExit(''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 36, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 36, col 28.
        write(u'''_APP_PERF_ID);

        /* Pend on receipt of command packet -- timeout set to 500 millisecs */
        status = CFE_SB_RcvMsg(&''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 39, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 39, col 33.
        write(u'''MsgPtr, ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 39, col 65
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 39, col 65.
        write(u'''_CommandPipe, 500);
        
        CFE_ES_PerfLogEntry(''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 41, col 29
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 41, col 29.
        write(u'''_APP_PERF_ID);

        if (status == CFE_SUCCESS)
        {
            ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 45, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 45, col 13.
        write(u'''_ProcessCommandPacket();
        }

    }

    CFE_ES_ExitApp(RunStatus);

} /* End of ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 52, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 52, col 13.
        write(u'''_AppMain() */
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_app_source= 'respond'

## END CLASS DEFINITION

if not hasattr(app_source, '_initCheetahAttributes'):
    templateAPIClass = getattr(app_source, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(app_source)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=app_source()).run()


