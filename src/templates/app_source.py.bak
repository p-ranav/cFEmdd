#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1450651563.240745
__CHEETAH_genTimestamp__ = 'Sun Dec 20 14:46:03 2015'
__CHEETAH_src__ = '/home/jeb/Repositories/cFEmdd/src/templates/app_source.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Dec 20 14:45:57 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class app_source(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(app_source, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''/*******************************************************************************
** File: ''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 2, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 2, col 10.
        write(u'''_app.c
**
** Purpose:
**   This file contains the source code for the ''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 5, col 49
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 5, col 49.
        write(u''' App.
**
*******************************************************************************/

/*
**   Include Files:
*/

#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 13, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 13, col 12.
        write(u'''.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 14, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 14, col 12.
        write(u'''_perfids.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 15, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 15, col 12.
        write(u'''_msgids.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 16, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 16, col 12.
        write(u'''_msg.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 17, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 17, col 12.
        write(u'''_events.h"
#include "''')
        _v = VFFSL(SL,"application_name",True) # u'${application_name}' on line 18, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name}')) # from line 18, col 12.
        write(u'''_version.h"

CFE_SB_PipeId_t    ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 20, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 20, col 20.
        write(u'''_CommandPipe;
CFE_SB_MsgPtr_t    ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 21, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 21, col 20.
        write(u'''MsgPtr;

/** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 24, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 24, col 4.
        write(u'''_AppMain() -- Application entry point and main process loop          */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * *  * * * * **/
void ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 27, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 27, col 6.
        write(u'''_AppMain( void )
{
    int32  status;
    uint32 RunStatus = CFE_ES_APP_RUN;

    ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 32, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 32, col 5.
        write(u'''_AppInit();

    /*
    ** ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 35, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 35, col 8.
        write(u''' Runloop
    */
    while (CFE_ES_RunLoop(&RunStatus) == TRUE)
    {
        /* Pend on receipt of command packet -- timeout set to 500 millisecs */
        status = CFE_SB_RcvMsg(&''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 40, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 40, col 33.
        write(u'''MsgPtr, ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 40, col 65
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 40, col 65.
        write(u'''_CommandPipe, 500);
        
        if (status == CFE_SUCCESS)
        {
            ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 44, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 44, col 13.
        write(u'''_ProcessCommandPacket();
        }
    }

    CFE_ES_ExitApp(RunStatus);

} /* End of ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 50, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 50, col 13.
        write(u'''_AppMain() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
/*                                                                            */
/* ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 54, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 54, col 4.
        write(u'''_AppInit() --  initialization                                       */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
void ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 57, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 57, col 6.
        write(u'''_AppInit(void)
{
    /*
    ** Register the app with Executive services
    */
    CFE_ES_RegisterApp() ;

    /*
    ** Register the events
    */ 
    CFE_EVS_Register(''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 67, col 22
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 67, col 22.
        write(u'''_EventFilters,
                     sizeof(''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 68, col 29
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 68, col 29.
        write(u'''_EventFilters)/sizeof(CFE_EVS_BinFilter_t),
                     CFE_EVS_BINARY_FILTER);

    /*
    ** Create the Software Bus command pipe
    */
    CFE_SB_CreatePipe(&''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 74, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 74, col 24.
        write(u'''_CommandPipe, 
\t\t      ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 75, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 75, col 9.
        write(u'''_PIPE_DEPTH,"''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 75, col 46
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 75, col 46.
        write(u'''_CMD_PIPE");
    // Subscribe to Messages Here


    // Reset Counters
    ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 80, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 80, col 5.
        write(u'''_ResetCounters();

    // Further Initialization Here
\t\t\t\t
} /* End of SAMPLE_AppInit() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*  Name:  ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 87, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 87, col 12.
        write(u'''_ProcessCommandPacket                                        */
/*                                                                            */
/*  Purpose:                                                                  */
/*     This routine will process any packet that is received on the           */
/*     ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 91, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 91, col 8.
        write(u''' command pipe.                                                          */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * *  * *  * * * * */
void ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 94, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 94, col 6.
        write(u'''_ProcessCommandPacket(void)
{
    CFE_SB_MsgId_t  MsgId;

    MsgId = CFE_SB_GetMsgId(''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 98, col 29
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 98, col 29.
        write(u'''MsgPtr);

    // Process MsgId Here
    switch (MsgId)
    {
''')
        for msgid in VFFSL(SL,"msgids",True): # generated from line 103, col 1
            write(u'''        case ''')
            _v = VFN(VFFSL(SL,"msgid",True),"split",False)(' ')[0] # u"${msgid.split(' ')[0]}" on line 104, col 14
            if _v is not None: write(_filter(_v, rawExpr=u"${msgid.split(' ')[0]}")) # from line 104, col 14.
            write(u''':
            // Process ''')
            _v = VFN(VFFSL(SL,"msgid",True),"split",False)(' ')[0] # u"${msgid.split(' ')[0]}" on line 105, col 24
            if _v is not None: write(_filter(_v, rawExpr=u"${msgid.split(' ')[0]}")) # from line 105, col 24.
            write(u''' command packet here
            break;
''')
        write(u'''        default:
            break;
    }

    return;

} /* End ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 114, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 114, col 10.
        write(u'''_ProcessCommandPacket */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*                                                                            */
/* ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 118, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 118, col 4.
        write(u'''_ProcessGroundCommand() -- ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 118, col 55
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 118, col 55.
        write(u''' ground commands                    */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

void ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 122, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 122, col 6.
        write(u'''_ProcessGroundCommand(void)
{
    uint16 CommandCode;

    CommandCode = CFE_SB_GetCmdCode(''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 126, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 126, col 37.
        write(u'''MsgPtr);

    /* Process "known" ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 128, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 128, col 24.
        write(u''' ground commands */
    switch (CommandCode)
    {
''')
        for cc in VFFSL(SL,"cmdcodes",True): # generated from line 131, col 1
            write(u'''        case ''')
            _v = VFN(VFFSL(SL,"cc",True),"split",False)(' ')[0] # u"${cc.split(' ')[0]}" on line 132, col 14
            if _v is not None: write(_filter(_v, rawExpr=u"${cc.split(' ')[0]}")) # from line 132, col 14.
            write(u''':
\t    // Process ''')
            _v = VFN(VFFSL(SL,"cc",True),"split",False)(' ')[0] # u"${cc.split(' ')[0]}" on line 133, col 17
            if _v is not None: write(_filter(_v, rawExpr=u"${cc.split(' ')[0]}")) # from line 133, col 17.
            write(u''' ground command here
            break;
''')
        write(u'''        /* default case already found during FC vs length test */
        default:
            break;
    }
    return;

} /* End of ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 142, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 142, col 13.
        write(u'''_ProcessGroundCommand() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*  Name:  ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 145, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 145, col 12.
        write(u'''_ReportHousekeeping                                              */
/*                                                                            */
/*  Purpose:                                                                  */
/*         This function is triggered in response to a task telemetry request */
/*         from the housekeeping task. This function will gather the Apps     */
/*         telemetry, packetize it and send it to the housekeeping task via   */
/*         the software bus                                                   */
/* * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * *  * *  * * * * */
void ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 153, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 153, col 6.
        write(u'''_ReportHousekeeping(void)
{
    // Report Housekeeping Here 
    return;

} /* End of ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 158, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 158, col 13.
        write(u'''_ReportHousekeeping() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*  Name:  ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 161, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 161, col 12.
        write(u'''_ResetCounters                                               */
/*                                                                            */
/*  Purpose:                                                                  */
/*         This function resets all the global counter variables that are     */
/*         part of the task telemetry.                                        */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * *  * *  * * * * */
void ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 168, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 168, col 6.
        write(u'''_ResetCounters(void)
{
    // Reset Counters Here
    return;

} /* End of ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 173, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 173, col 13.
        write(u'''_ResetCounters() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*                                                                            */
/* ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 177, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 177, col 4.
        write(u'''_VerifyCmdLength() -- Verify command packet length                   */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
boolean ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 180, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 180, col 9.
        write(u'''_VerifyCmdLength(CFE_SB_MsgPtr_t msg, uint16 ExpectedLength)
{     
    boolean result = TRUE;

    uint16 ActualLength = CFE_SB_GetTotalMsgLength(msg);

    /*
    ** Verify the command packet length.
    */
    if (ExpectedLength != ActualLength)
    {
        CFE_SB_MsgId_t MessageID   = CFE_SB_GetMsgId(msg);
        uint16         CommandCode = CFE_SB_GetCmdCode(msg);

\t// Handle Command Length Error Here

        result = FALSE;
    }

    return(result);

} /* End of ''')
        _v = VFFSL(SL,"application_name_caps",True) # u'${application_name_caps}' on line 201, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${application_name_caps}')) # from line 201, col 13.
        write(u'''_VerifyCmdLength() */
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_app_source= 'respond'

## END CLASS DEFINITION

if not hasattr(app_source, '_initCheetahAttributes'):
    templateAPIClass = getattr(app_source, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(app_source)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=app_source()).run()


