#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1450707525.235928
__CHEETAH_genTimestamp__ = 'Mon Dec 21 06:18:45 2015'
__CHEETAH_src__ = '/home/jeb/Repositories/cFEmdd/src/templates/cpu1_Makefile.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Dec 20 14:09:46 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class cpu1_Makefile(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(cpu1_Makefile, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#
# File: Makefile
''')
        write(u'''# Purpose:
#   Main Makefile for cFE core build and all apps
''')
        write(u'''## $Id: Makefile 1.22 2014/10/14 15:55:12GMT-05:00 acudmore Exp  $
''')
        write(u'''# Purpose: Main Makefile for cFE core build and all apps 
''')
        write(u'''# $Log: Makefile  $
# Revision 1.22 2014/10/14 15:55:12GMT-05:00 acudmore 
# Added CFE_PLATFORM_INC_SRC and removed CPUNAME. File installs are now relative and do not depend on the CPUNAME.
# Revision 1.21 2014/08/22 15:23:30GMT-05:00 acudmore 
# Moved tool build rules to cfs.mak.
# Added macros to define executable file extensions.
# Revision 1.20 2014/07/10 07:35:12GMT-05:00 acudmore 
# Updated clean rules, added config and distclean rules
# Revision 1.19 2014/07/07 08:09:37GMT-05:00 acudmore 
# Updated elf2cfetbl rule
# Revision 1.18 2014/06/19 11:40:58GMT-05:00 acudmore 
# New location for cfs.mak and cfs_tst.mak.
# Rules for elf2cfetbl in build directory
# Revision 1.17 2014/06/12 13:41:49GMT-05:00 wmoleski 
# Updated the build/cpux/Makefile to contain comments about the Path variables and restored the 
# Revision history to build/cpux/cfe/unit-test/xx/Makefiles.
# Revision 1.16 2014/06/09 07:24:36EDT wmoleski 
# Moved the MISSION environment variable from Makefile to setenvs.sh, modified the Apps and 
# Tbls to be null and modifed the BUILD_PATH in the Makefile.
# Revision 1.15 2014/05/28 07:45:35EDT wmoleski 
# Checking in the files that were modified in the mission tree.
# Revision 1.14 2009/07/31 16:28:32EDT rmcgraw
# DCR8291:8 Removed CF entries and added log
''')
        write(u'''#

#===============================================================================
# Build-specific environment variables
#===============================================================================

# List of apps/libs to include in the build
THE_APPS :=\\
''')
        for app in VFFSL(SL,"apps",True): # generated from line 43, col 1
            _v = VFFSL(SL,"app",True) # u'$app' on line 44, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$app')) # from line 44, col 1.
        write(u"""
export THE_APPS

# List of apps that include tables for the build
THE_TBLS := 
# THE_TBLS += ds fm hk lc sc sch
# THE_TBLS += cf hs 
export THE_TBLS

#===============================================================================
# Platform-specific environment variables
#===============================================================================

#===============================================================================
# The CFE_CORE_PLATFORM_INC_SRC variable determines which set of cFE platform
# config header files is used. 
# The cFE currently has cpu1, cpu2, and cpu3 platform config directories.
#===============================================================================
export CFE_CORE_PLATFORM_INC_SRC:=cpu1

#===============================================================================
# The BUILD_PATH variable is not used in the current cFE baseline. However, this
# variable is used in the makefiles included below for copying files. By
# default, the CFS build will put all of the build products (.o's (or .so's for
# linux), .tbls, etc) in /exe. This default location may not work in a shared
# lab machine. The BUILD_PATH was added so that users can specify where they
# want the build products to go.
#===============================================================================
BUILD_PATH:=.

#===============================================================================
# The VOLTAB_PATH variable is not used in the current cFE baseline.  The PSP
# defines where the CFS build will load/run from, which may not necessarily be 
# the same as the BUILD_PATH directory.  To make things simple and flexible for
# all users, the VOLTAB_PATH is defined here and can be used for convenience. 
# This variable can be used in the cfe_psp_voltab.c file when the PSP source is
# shared amonst multiple platforms.  An example cfe_psp_voltab.c entry is 
# provided below:
""")
        write(u'''# {"/cf",      VOLTAB_PATH, FS_BASED, FALSE, FALSE, TRUE,  "CF", "/cf", 1024 },
''')
        write(u'''#===============================================================================
#export TARGET_DEFS:=-DVOLTAB_PATH=\'"$(HOME)/tmp"\'

export CFS_EXE:=$(BUILD_PATH)/exe
export CFS_PROM:=$(CFS_EXE)/cf
export CFS_PROM_APPS:=$(CFS_PROM)/apps
export CFS_RAM:=$(CFS_EXE)/ram
#export CFS_STATIC_STARTUP_TBL:=$(BUILD_PATH)

''')
        write(u'''# Define the Executable file extensions for copies
# This should match the type of system being compiled
''')
        write(u'''export CFE_CORE_EXE_TYPE:=bin
export CFS_APP_EXE_TYPE:=so

#===============================================================================
# Top-level build rules
#===============================================================================

all:: cfs_envs cfs_inbuild cfs_postbuild

config:: cfs_envs cfs_prebuild cfs_tool

clean:: cfs_clean

distclean:: cfs_realclean cfs_cleantool

realclean:: cfs_realclean cfs_cleantool

#===============================================================================
# Supplemental makefile(s)
#===============================================================================
# cfs.mak file should not be modified by general users.
include ../cfs.mak

#===============================================================================
# User-defined build rules
#===============================================================================
# Users can add their own build rules here.
include ../cfs_tst.mak

#
# End of top-level CFS makefile for Linux platform
#
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_cpu1_Makefile= 'respond'

## END CLASS DEFINITION

if not hasattr(cpu1_Makefile, '_initCheetahAttributes'):
    templateAPIClass = getattr(cpu1_Makefile, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(cpu1_Makefile)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=cpu1_Makefile()).run()


