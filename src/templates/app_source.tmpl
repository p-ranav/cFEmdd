/*******************************************************************************
** File: ${application_name}_app.c
**
** Purpose:
**   This file contains the source code for the ${application_name} App.
**
*******************************************************************************/

/*
**   Include Files:
*/

\#include "${application_name}.h"
\#include "${application_name}_perfids.h"
\#include "${application_name}_msgids.h"
\#include "${application_name}_msg.h"
\#include "${application_name}_events.h"
\#include "${application_name}_version.h"

CFE_SB_PipeId_t    ${application_name_caps}_CommandPipe;
CFE_SB_MsgPtr_t    ${application_name_caps}MsgPtr;

/** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* ${application_name_caps}_AppMain() -- Application entry point and main process loop          */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * *  * * * * **/
void ${application_name_caps}_AppMain( void )
{
    int32  status;
    uint32 RunStatus = CFE_ES_APP_RUN;

    ${application_name_caps}_AppInit();

    /*
    ** ${application_name_caps} Runloop
    */
    while (CFE_ES_RunLoop(&RunStatus) == TRUE)
    {
        /* Pend on receipt of command packet -- timeout set to 500 millisecs */
        status = CFE_SB_RcvMsg(&${application_name_caps}MsgPtr, ${application_name_caps}_CommandPipe, 500);
        
        if (status == CFE_SUCCESS)
        {
            ${application_name_caps}_ProcessCommandPacket();
        }
    }

    CFE_ES_ExitApp(RunStatus);

} /* End of ${application_name_caps}_AppMain() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
/*                                                                            */
/* ${application_name_caps}_AppInit() --  initialization                                       */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
void ${application_name_caps}_AppInit(void)
{
    /*
    ** Register the app with Executive services
    */
    CFE_ES_RegisterApp() ;

    // Register Events Here 

    /*
    ** Create the Software Bus command pipe
    */
    CFE_SB_CreatePipe(&${application_name_caps}_CommandPipe, 
		      ${application_name_caps}_PIPE_DEPTH,"${application_name_caps}_CMD_PIPE");
    // Subscribe to Messages Here


    // Reset Counters
    ${application_name_caps}_ResetCounters();

    // Further Initialization Here
				
} /* End of SAMPLE_AppInit() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*  Name:  ${application_name_caps}_ProcessCommandPacket                                        */
/*                                                                            */
/*  Purpose:                                                                  */
/*     This routine will process any packet that is received on the           */
/*     ${application_name_caps} command pipe.                                                          */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * *  * *  * * * * */
void ${application_name_caps}_ProcessCommandPacket(void)
{
    CFE_SB_MsgId_t  MsgId;

    MsgId = CFE_SB_GetMsgId(${application_name_caps}MsgPtr);

    // Process MsgId Here
    switch (MsgId)
    {
#for $msgid in $msgids
        case ${msgid.split(' ')[0]}:
            // Process ${msgid.split(' ')[0]} command packet here
            break;
#end for
        default:
            break;
    }

    return;

} /* End ${application_name_caps}_ProcessCommandPacket */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*                                                                            */
/* ${application_name_caps}_ProcessGroundCommand() -- ${application_name_caps} ground commands                    */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

void ${application_name_caps}_ProcessGroundCommand(void)
{
    uint16 CommandCode;

    CommandCode = CFE_SB_GetCmdCode(${application_name_caps}MsgPtr);

    /* Process "known" ${application_name_caps} ground commands */
    switch (CommandCode)
    {
#for $cc in $cmdcodes
        case ${cc.split(' ')[0]}:
	    // Process ${cc.split(' ')[0]} ground command here
            break;
#end for
        /* default case already found during FC vs length test */
        default:
            break;
    }
    return;

} /* End of ${application_name_caps}_ProcessGroundCommand() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*  Name:  ${application_name_caps}_ReportHousekeeping                                              */
/*                                                                            */
/*  Purpose:                                                                  */
/*         This function is triggered in response to a task telemetry request */
/*         from the housekeeping task. This function will gather the Apps     */
/*         telemetry, packetize it and send it to the housekeeping task via   */
/*         the software bus                                                   */
/* * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * *  * *  * * * * */
void ${application_name_caps}_ReportHousekeeping(void)
{
    // Report Housekeeping Here 
    return;

} /* End of ${application_name_caps}_ReportHousekeeping() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*  Name:  ${application_name_caps}_ResetCounters                                               */
/*                                                                            */
/*  Purpose:                                                                  */
/*         This function resets all the global counter variables that are     */
/*         part of the task telemetry.                                        */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * *  * *  * * * * */
void ${application_name_caps}_ResetCounters(void)
{
    // Reset Counters Here
    return;

} /* End of ${application_name_caps}_ResetCounters() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
/*                                                                            */
/* ${application_name_caps}_VerifyCmdLength() -- Verify command packet length                   */
/*                                                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
boolean ${application_name_caps}_VerifyCmdLength(CFE_SB_MsgPtr_t msg, uint16 ExpectedLength)
{     
    boolean result = TRUE;

    uint16 ActualLength = CFE_SB_GetTotalMsgLength(msg);

    /*
    ** Verify the command packet length.
    */
    if (ExpectedLength != ActualLength)
    {
        CFE_SB_MsgId_t MessageID   = CFE_SB_GetMsgId(msg);
        uint16         CommandCode = CFE_SB_GetCmdCode(msg);

	// Handle Command Length Error Here

        result = FALSE;
    }

    return(result);

} /* End of ${application_name_caps}_VerifyCmdLength() */
